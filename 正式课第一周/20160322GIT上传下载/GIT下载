1、GIT应用于团队协作开发项目的时候，每个人负责一个版块，对于前端来说，每个人都要写"xxx.html"，"xxx.css”，"xxx.js"一个或者多个这样的文件

2、GIT其实就是一个文件仓库，我们每一个人把自己写的放在仓库中，如果别人也要用，需要到仓库中，把你写的下载下来进行修改，修改完成后在传到仓库中

3、GIT管理文件的机制非常完善：每个人提交一次都会自动的记录一次历史记录，当出现问题的时候，我们可以快速的查看历史版本内容，参考或者还原到某个版本（版本管理）

[svn]和GIT的作用是一样的，但是从性能和深入管理上来讲，都不如IGIT，所以大公司都在使用GIT进行管理

4、gitHub:一个网站，是一个使用GIT进行管理的开源仓库，jQuery、angular.js、sea.js、这些目前常用到的前端类库的源码都在gitHub上单独建立了自己的仓库并且保管
    网址：https://github.com/

5、注册gitHub账号，我们的邮箱必须需要验证

6、README:是一个文件,用来详细描述仓库的文件，例如：我的仓库管理的是一个轮播图插件，我可以在readme中描述这个插件的原理及使用方法

7、创建一个新的仓库

8、以git方式管理我们的gitHub上创建的仓库
1）把gitHub仓库先下载到本地   在文件夹右击：Git Bash Here --->git clone 地址（HTTPS:.....)
2）删除文件：Settings------>delete this respository

9、本地长传仓库
1）在当前本地目录下，右击git Bash Here ,打开git命令窗口
2）$ git add -A,把本地修改的文件，先提交到缓存区 -A：把所有的文件都提交到缓存区
$git add "缓存文件名"
3)把缓存区的内容提交到本地历史区$ git commit -m"本次提交的描述"
4)把本地历史区的内容提交到远程仓库$git push origin master
5)输入用户名和密码

如果仓库内容改变，在通过下面命令，拉到本地
$git pull origin master (拉取下来)
 重新上传


 关于本地代码和远程仓库的链接问题
 1）通过$git clone 远程地址 之后，我们本地文件就已经和远程仓库保持链接了 查看链接命令：
 $ git remote -v
 origin  https://github.com/Anna196281/myFirstRepository.git (fetch)
 origin  https://github.com/Anna196281/myFirstRepository.git (push)

 origin是本地和远程仓库链接的那个名字

 $git push origin master -->把本地的代码以master这个分支推送到origin这个名字所关联的那个远程地址仓库里

 2）我们可以自己手动增加链接
 $git remote add anna https://github.com/Anna196281/myFirstRepository.git
  $git remote rm anna   删除这个名字


  更新老师讲义：
  1）登录自己的gitHub号，通过地址栏输入老师讲义的地址https://github.com/zhufengpeixun/JavaScript201602
这样就可以看到珠峰培训的这个仓库了

2）点击fork:他的意思就是把珠峰培训的仓库克隆一份一模一样的到自己的仓库

3）把自己的仓库克隆到本地一份（切记：不是克隆珠峰培训）
  ---》我们本地有了一份与自己仓库一模一样的代码
  ---》我们本地和自己仓库已经关联到一起了

4）把本地的文件和“珠峰培训的仓库”关联到一起
 $git remote add zhufeng https://github.com/zhufengpeixun/JavaScript201602.git


=======================================以上四部只需要执行一次，以后更新讲义不需要执行===================================

5）如果老师的讲义更新了，我们也需要把自己的讲义更新

 $git remote update zhufeng （更新通道）
 $git pull zhufeng master (把珠峰培训仓库的最新讲义拉取到本地）

6）把自己本地的最新的讲义，上传到“自己的仓库”一份，以防止珠峰培训的仓库删除后，找不到
$ git add -A
$ git commit -m"备注信息"
$ git push origin master







